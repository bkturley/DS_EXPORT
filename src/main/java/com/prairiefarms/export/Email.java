package com.prairiefarms.export;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;



public class Email {

    Properties configuration = new Properties();
    String documentName;
    ArrayList<String> attachments = new ArrayList<>();

    Email(String documentName){
        this.documentName = documentName;
        try {
            configuration.load(new FileInputStream("/UTILITIES/UTILITIES.properties"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        attachments.add(getTxtFileAttachment(documentName));
        attachments.add(getPdfFileAttachment(documentName));
        attachments.add(getXlsxFileAttachment(documentName));

    }



    public void send(String addresses) {
        Properties props = new Properties();

        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", configuration.getProperty("emailHost"));
        props.put("mail.smtp.port", "25");

        Session session = Session.getInstance(props, new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(configuration.getProperty("user"),
                        configuration.getProperty("password"));
            }
        });

        try {
            MimeMessage message = new MimeMessage(session);

            message.setFrom(new InternetAddress(configuration.getProperty("defaultSenderEmailAddress").trim().trim()));
            message.addRecipients(Message.RecipientType.TO, InternetAddress.parse(addresses.trim()));
            message.addRecipients(Message.RecipientType.CC, InternetAddress.parse(""));
            message.setSubject("AutoGenerated: " + documentName);

            Multipart multipart = new MimeMultipart();

            BodyPart messageBodyPart = new MimeBodyPart();

            messageBodyPart.setContent("*** DO NOT REPLY TO THIS EMAIL ***" + "<br><br><br>"
                                       + configuration.getProperty("disclaimer"), "text/html");

            multipart.addBodyPart(messageBodyPart);

            for (String anAttachment : attachments) {
                if (anAttachment != null) {
                    BodyPart attachmentBodyPart = new MimeBodyPart();

                    DataSource source = new FileDataSource(anAttachment.trim());

                    attachmentBodyPart.setDataHandler(new DataHandler(source));

                    attachmentBodyPart.setFileName(source.getName().trim());

                    multipart.addBodyPart(attachmentBodyPart);
                }
            }

            message.setContent(multipart);

            message.setSentDate(new Date());

            Transport.send(message);

            for(String attachmentName : attachments){

            }

        } catch (MessagingException e) {
            System.out.println(e);
        }
    }

    private String getTxtFileAttachment(String fileName){
        String returnMe = "";
        returnMe = "/UTILITIES/mail/" + fileName + ".txt";
        return returnMe;
    }

    private String getPdfFileAttachment(String fileName){
        String returnMe = "";
        returnMe = "/UTILITIES/mail/" + fileName + ".pdf";
        return returnMe;
    }

    private String getXlsxFileAttachment(String fileName){
        return "/UTILITIES/mail/" + new ExcelWorkbook(fileName, fileName).getFileName();
    }
}
